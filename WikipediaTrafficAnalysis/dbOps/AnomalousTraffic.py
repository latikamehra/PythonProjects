'''
Created on Jul 20, 2019

@author: latikamehra
'''

import tableSchemas.AnomalousTraffic
from dbOps import Postgres
from tableSchemas import PageViewTotals


class dbOps():
    
    def __init__(self, *verbose):
        
        self.pg_pvt = Postgres.postgres(PageViewTotals.tableName, PageViewTotals.schema, *verbose)
        self.pg_at = Postgres.postgres(tableSchemas.AnomalousTraffic.tableName, tableSchemas.AnomalousTraffic.schema, *verbose)
        
        self.pvt_id_col = PageViewTotals.schema[0][0]
        self.pvt_page_name_col = PageViewTotals.schema[1][0]
        self.pvt_totals_col = PageViewTotals.schema[2][0]
        self.pvt_avg_vc = PageViewTotals.schema[3][0]
        
        self.at_id_col = tableSchemas.AnomalousTraffic.schema[0][0]
        self.at_dt = tableSchemas.AnomalousTraffic.schema[1][0]
        self.at_vc = tableSchemas.AnomalousTraffic.schema[2][0]
        
        self.openDBConnections()
        self.createTables()
        
        
    
    def openDBConnections(self):
        self.pg_pvt.connect()
        self.pg_at.connect()
    
    def createTables(self):
        self.pg_pvt.createTable()
        self.pg_at.createTable()
        
    def closeDBConnections(self):
        self.pg_pvt.closeConns()
        self.pg_at.closeConns()
    
    def deleteAllTables(self):
        self.pg_pvt.dropTable()
        self.pg_at.dropTable()
        
    def resetTables(self):
        self.deleteAllTables()
        self.createTables()
    
        
        
    def writeData(self, anomalousTrafficDS):
        pg_id = self.fetchPageID(anomalousTrafficDS.wikiPage)
        self.updateTotals(pg_id, anomalousTrafficDS)
        
        pg_id = self.fetchPageID(anomalousTrafficDS.wikiPage) # Update pg_id to the ID generated by the insert statement above
        self.updateAnomalousTrafficTable(pg_id, anomalousTrafficDS)
        
    def executeSQL(self,sql):
        res = self.pg_pvt.executeReadStatement(sql) 
        return(res)
        
    def readPageTotalData(self, pageName):
        pg_id = self.fetchPageID(pageName)
        whr_stmnt = "WHERE "+self.pvt_id_col+"="+pg_id
        pvt_res = self.pg_pvt.readData("*", whr_stmnt)
        return (pvt_res)
        
    def readAnomalousData(self, pageName):
        pg_id = self.fetchPageID(pageName)
        whr_stmnt = "WHERE "+self.pvt_id_col+"="+pg_id
        at_res = self.pg_at.readData("*", whr_stmnt)
        return (at_res)
        
    def fetchPageID(self, pageName):
        id_check = self.pg_pvt.readData(self.pvt_id_col, "WHERE "+self.pvt_page_name_col+"='"+pageName.title()+"'")
        
        if len(id_check) > 0 :
            pg_id = str(id_check[0][self.pvt_id_col]) # If data for the pageName already exists then return the ID of the table record
        else :
            pg_id = "0" # Else return the non-existent ID '0'
            
        return (pg_id)
    
    
    def updateTotals(self, pg_id, anomalousTrafficDS):
        
        if pg_id != "0" : # Check if a row for the wiki page already exists
            set_stmnt = "SET "+self.pvt_totals_col+"="+str(anomalousTrafficDS.totalViewCountsOfAllTime) + ", " + self.pvt_avg_vc+"="+str((anomalousTrafficDS.totalViewCountsOfAllTime/anomalousTrafficDS.totalNumberOfDays))
            whr_stmnt = "WHERE "+self.pvt_id_col+"="+pg_id
            self.pg_pvt.updateData(set_stmnt , whr_stmnt) # Wiki page data already exists, therefore update the record with new totals
        else :
            self.pg_pvt.insertData([(anomalousTrafficDS.wikiPage, anomalousTrafficDS.totalViewCountsOfAllTime, (anomalousTrafficDS.totalViewCountsOfAllTime/anomalousTrafficDS.totalNumberOfDays))]) # Wiki page data does NOT exist, therefore insert a new record
            
            
            
    def updateAnomalousTrafficTable(self, pg_id, anomalousTrafficDS):
        self.pg_at.deleteSpecificRows("WHERE "+tableSchemas.AnomalousTraffic.schema[0][0]+"="+pg_id) # Delete any existing anomalous traffic data for the page ID (if exists)
        
        dataTplLst = []
        for key, val in anomalousTrafficDS.anomalousActvityDict.items() :
            dataTplLst.append((pg_id,key,val)) # Create a tuple of Page ID, Anomalous Date & Anomalous View Count and append to the list
            
        self.pg_at.insertData(dataTplLst)
        